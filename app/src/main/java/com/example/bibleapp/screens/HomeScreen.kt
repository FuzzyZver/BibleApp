package com.example.bibleapp.screens


import androidx.compose.foundation.ExperimentalFoundationApi
import androidx.compose.foundation.Image
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyRow
import androidx.compose.foundation.lazy.items
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Menu
import androidx.compose.material.icons.filled.Search
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import androidx.navigation.NavHostController
import kotlinx.coroutines.launch
import  data.local.AppDatabase
import data.local.BookEntity
import com.example.bibleapp.BookRepository

@OptIn(ExperimentalMaterial3Api::class, ExperimentalFoundationApi::class)
@Composable
fun HomeScreen(navController: NavHostController) {
    val context = LocalContext.current

    val repository = remember {
        val dao = AppDatabase.getDatabase(context).bookDao()
        BookRepository(dao)
    }
    var randomBooks by remember { mutableStateOf<List<BookEntity>>(emptyList()) }
    val drawerState = rememberDrawerState(initialValue = DrawerValue.Closed)
    val coroutineScope = rememberCoroutineScope()

    // –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∞–Ω–¥–æ–º–Ω—ã—Ö –∫–Ω–∏–≥ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —ç–∫—Ä–∞–Ω–∞
    LaunchedEffect(Unit) {
        // –ú—ã —Ö–æ—Ç–∏–º, —á—Ç–æ–±—ã –ø—Ä–∏ –∫–∞–∂–¥–æ–º –æ—Ç–∫—Ä—ã—Ç–∏–∏ —ç–∫—Ä–∞–Ω–∞ (–∏–ª–∏ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ)
        // —Å–ø–∏—Å–æ–∫ –∫–Ω–∏–≥ –æ–±–Ω–æ–≤–ª—è–ª—Å—è
        try {
            // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –≤–∞—à–µ–º BookRepository
            randomBooks = repository.getNRandomBooks(5) // –ó–∞–≥—Ä—É–∂–∞–µ–º 5 —Å–ª—É—á–∞–π–Ω—ã—Ö –∫–Ω–∏–≥
        } catch (e: Exception) {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            println("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞–Ω–¥–æ–º–Ω—ã—Ö –∫–Ω–∏–≥: ${e.message}")
        }
    }

    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ç–µ–∫—Å—Ç–∞ –ø–æ–∏—Å–∫–∞
    var searchText by remember { mutableStateOf("") }

    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∫–Ω–∏–≥ (–ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –¥–ª—è –ø–æ–∏—Å–∫–∞)
    var allBooks by remember { mutableStateOf<List<BookEntity>>(emptyList()) }

    // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    LaunchedEffect(Unit) {
        try {
            randomBooks = repository.getNRandomBooks(5)
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –∫–Ω–∏–≥–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞
            allBooks = repository.getAllBooks()
        } catch (e: Exception) {
            println("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: ${e.message}")
        }
    }

    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ –∫–Ω–∏–≥ –ø–æ —Ç–µ–∫—Å—Ç—É –ø–æ–∏—Å–∫–∞
    val filteredBooks = remember(searchText, allBooks) {
        if (searchText.isBlank()) {
            emptyList() // –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –ø—É—Å—Ç–∞, –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
        } else {
            allBooks.filter {
                it.title.contains(searchText, ignoreCase = true)
            }
        }
    }

    ModalNavigationDrawer(
        drawerState = drawerState,
        drawerContent = {
            ModalDrawerSheet {
                Text(
                    text = "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏",
                    style = MaterialTheme.typography.titleMedium,
                    modifier = Modifier.padding(16.dp)
                )

                DrawerButton("–ö–ª–∞—Å—Å–∏–∫–∞") {
                    coroutineScope.launch { drawerState.close() }
                    navController.navigate("category/–ö–ª–∞—Å—Å–∏–∫–∞")
                }

                DrawerButton("–ò—Å—Ç–æ—Ä–∏—è") {
                    coroutineScope.launch { drawerState.close() }
                    navController.navigate("category/–ò—Å—Ç–æ—Ä–∏—è")
                }

                DrawerButton("–ù–∞—É–∫–∞") {
                    coroutineScope.launch { drawerState.close() }
                    navController.navigate("category/–ù–∞—É–∫–∞")
                }

                Divider(modifier = Modifier.padding(vertical = 15.dp)) // –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
                Text(
                    text = "–ü—Ä–æ—á–µ–µ",
                    style = MaterialTheme.typography.titleMedium,
                    modifier = Modifier.padding(16.dp)
                )

                DrawerButton("–ê–≤—Ç–æ—Ä—ã") {
                    coroutineScope.launch { drawerState.close() }
                    navController.navigate("authors") // –ù–∞–≤–∏–≥–∞—Ü–∏—è –Ω–∞ –Ω–æ–≤—ã–π —ç–∫—Ä–∞–Ω
                }
            }
        }
    ) {
        Scaffold(
            topBar = {
                HomeTopAppBar(
                    onMenuClick = {
                        coroutineScope.launch {
                            if (drawerState.isClosed) drawerState.open() else drawerState.close()
                        }
                    },
                    searchText = searchText,
                    onSearchTextChange = { searchText = it }
                )
            },
            content = { innerPadding ->
                Column(
                    modifier = Modifier
                        .fillMaxSize()
                        .padding(innerPadding)
                ) {

                    // --- –ë–õ–û–ö –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –ü–û–ò–°–ö–ê ---
                    if (searchText.isNotBlank()) {
                        SearchContent(filteredBooks, navController)
                    } else {
                        // --- –ë–õ–û–ö –°–õ–£–ß–ê–ô–ù–´–• –ö–ù–ò–ì (–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–µ –ø–æ–∏—Å–∫–∞) ---
                        Text(
                            text = "üìñ –°–æ–≤–µ—Ç—É–µ–º –∫ –ø—Ä–æ—á—Ç–µ–Ω–∏—é",
                            style = MaterialTheme.typography.titleLarge.copy(fontWeight = FontWeight.Bold),
                            modifier = Modifier.padding(horizontal = 16.dp, vertical = 30.dp)
                        )

                        LazyRow(
                            modifier = Modifier
                                .fillMaxWidth()
                                .padding(horizontal = 8.dp),
                            horizontalArrangement = Arrangement.spacedBy(12.dp)
                        ) {
                            items(randomBooks) { book ->
                                BookRecommendationCard(book = book, navController = navController)
                            }
                        }
                    }
                }
            }
        )
    }
}

// –ù–æ–≤—ã–π Composable –¥–ª—è TopAppBar
@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun HomeTopAppBar(
    onMenuClick: () -> Unit,
    searchText: String,
    onSearchTextChange: (String) -> Unit
) {
    TopAppBar(
        title = { Text("LibrApp") },
        navigationIcon = {
            IconButton(onClick = onMenuClick) {
                Icon(Icons.Filled.Menu, contentDescription = "–ú–µ–Ω—é –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
            }
        },
        actions = {
            // –ü–æ–ª–µ –ø–æ–∏—Å–∫–∞
            OutlinedTextField(
                value = searchText,
                onValueChange = onSearchTextChange,
                label = { Text("–ü–æ–∏—Å–∫...") },
                leadingIcon = { Icon(Icons.Filled.Search, contentDescription = "–ü–æ–∏—Å–∫") },
                singleLine = true,
                modifier = Modifier
                    .fillMaxWidth(0.6f) // –ó–∞–Ω–∏–º–∞–µ—Ç 60% –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –º–µ—Å—Ç–∞
                    .padding(end = 8.dp)
                    .height(56.dp) // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤—ã—Å–æ—Ç–∞ –¥–ª—è –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è
            )
        }
    )
}

// –ù–æ–≤—ã–π Composable –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
@Composable
fun SearchContent(books: List<BookEntity>, navController: NavHostController) {
    Column(modifier = Modifier.fillMaxSize().padding(16.dp)) {
        if (books.isEmpty()) {
            Text("–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", style = MaterialTheme.typography.bodyLarge)
        } else {
            Text("–ù–∞–π–¥–µ–Ω–æ –∫–Ω–∏–≥: ${books.size}", style = MaterialTheme.typography.titleMedium.copy(fontWeight = FontWeight.Bold))
            Spacer(Modifier.height(8.dp))

            // –ò—Å–ø–æ–ª—å–∑—É–µ–º LazyColumn –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            // (–í–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∏–º–ø–æ—Ä—Ç: LazyColumn –∏ items)
            // –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ Column —Å —Ü–∏–∫–ª–æ–º, –µ—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –Ω–µ–±–æ–ª—å—à–æ–π.
            // –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º Column, –Ω–æ –¥–ª—è –±–æ–ª—å—à–∏—Ö —Å–ø–∏—Å–∫–æ–≤ –ª—É—á—à–µ LazyColumn.

            books.forEach { book ->
                ListItem(
                    headlineContent = { Text(book.title) },
                    supportingContent = { Text("–ê–≤—Ç–æ—Ä: ${book.author}") },
                    modifier = Modifier.clickable {
                        navController.navigate("book/${book.title}")
                    }
                )
                Divider()
            }
        }
    }
}

// –ù–æ–≤—ã–π Composable –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏ –∫–Ω–∏–≥–∏ –≤ LazyRow
@Composable
fun BookRecommendationCard(book: BookEntity, navController: NavHostController) {
    Card(
        onClick = { navController.navigate("book/${book.title}") }, // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —ç–∫—Ä–∞–Ω –∫–Ω–∏–≥–∏
        modifier = Modifier.size(width = 100.dp, height = 180.dp)
    ) {
        Column(
            modifier = Modifier.fillMaxSize(),
            horizontalAlignment = Alignment.CenterHorizontally
        ) {
            // –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±–ª–æ–∂–∫–∏
            Image(
                painter = painterResource(id = book.coverResId),
                contentDescription = "–û–±–ª–æ–∂–∫–∞ –∫–Ω–∏–≥–∏ ${book.title}",
                modifier = Modifier
                    .fillMaxWidth()
                    .height(130.dp),
                // –î–æ–±–∞–≤—å—Ç–µ contentScale, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ, —á—Ç–æ–±—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–ø–æ–ª–Ω—è–ª–æ –æ–±–ª–∞—Å—Ç—å
            )
            // –ù–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏
            Text(
                text = book.title,
                style = MaterialTheme.typography.labelSmall,
                modifier = Modifier.padding(4.dp),
                maxLines = 2
            )
        }
    }
}

@Composable
fun DrawerButton(text: String, onClick: () -> Unit) {
    TextButton(
        onClick = onClick,
        modifier = Modifier
            .fillMaxWidth()
            .padding(horizontal = 8.dp)
    ) {
        Text(text)
    }
}
